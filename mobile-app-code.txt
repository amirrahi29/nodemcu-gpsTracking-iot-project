import 'dart:async';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:url_launcher/url_launcher.dart';

class MyDemoPage extends StatefulWidget {
  const MyDemoPage({Key? key}) : super(key: key);

  @override
  State<MyDemoPage> createState() => _MapScreenState();
}

class _MapScreenState extends State<MyDemoPage> {
  late GoogleMapController _controller;
  late LatLng _currentLocation;

  Set<Marker> markers = {};
  late Timer _timer;

  static const CameraPosition _kGooglePlex = CameraPosition(
    target: LatLng(37.42796133580664, -122.085749655962),
    zoom: 14.4746,
  );

  @override
  void initState() {
    super.initState();
    _currentLocation = LatLng(37.42796133580664, -122.085749655962);
    _addDefaultMarker();
    _getCurrentLocationFromFirebase();

    // Set up a periodic timer to fetch location every 10 seconds
    _timer = Timer.periodic(Duration(seconds: 2), (Timer t) {
      _getCurrentLocationFromFirebase();
    });
  }

  Future<void> _getCurrentLocationFromFirebase() async {
    final ref = FirebaseDatabase.instance.ref();
    final snapshot = await ref.child('location').get();

    double? latitude;
    double? longitude;

    if (snapshot.exists) {
      final dynamic data = snapshot.value;

      latitude = double.tryParse(data?['latitude'] ?? '');
      longitude = double.tryParse(data?['longitude'] ?? '');

      if (latitude != null && longitude != null) {
        setState(() {
          _currentLocation = LatLng(latitude!, longitude!);
          _addCarMarker(); // Update the car marker when location changes
        });
      }
    } else {
      print('No data available. Using default location.');
      latitude = 37.42796133580664;
      longitude = -122.085749655962;
    }

    if (_controller != null) {
      _controller.animateCamera(CameraUpdate.newLatLng(_currentLocation));
    } else {
      print('GoogleMapController is null.');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Stack(
          children: <Widget>[
            GoogleMap(
              initialCameraPosition: _kGooglePlex,
              markers: markers,
              onMapCreated: (controller) {
                _controller = controller;
              },
            ),
            Positioned(
              top: 0,
              right: 0,
              left: 0,
              child: InkWell(
                onTap: () {
                  _getCurrentLocationFromFirebase();
                },
                child: Container(
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    children: [
                      Text(
                        "Car Location \n Latitude: ${_currentLocation.latitude},\n Longitude: ${_currentLocation.longitude}",
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 8),
                      ElevatedButton(
                        onPressed: () {
                          _launchGoogleMaps();
                        },
                        child: Text('Navigate on Google Maps'),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Marker _carMarker() {
    return Marker(
      markerId: MarkerId('current_location'),
      position: _currentLocation,
      icon: BitmapDescriptor.defaultMarker, // You can customize this with your car icon
    );
  }

  void _addCarMarker() async {
    final Uint8List carMarkerIcon = await getImages("assets/images/car.png", 200);

    setState(() {
      markers.add(
        Marker(
          markerId: MarkerId('car_marker'),
          position: _currentLocation,
          icon: BitmapDescriptor.fromBytes(carMarkerIcon),
        ),
      );
    });
  }

  void _addDefaultMarker() async {
    final Uint8List markersIcons =
    await getImages("assets/images/car.png", 200);
    _addCarMarker();
    setState(() {
      markers.add(
        Marker(
          markerId: MarkerId('default_marker'),
          position: LatLng(37.42796133580664, -122.085749655962),
          icon: BitmapDescriptor.fromBytes(markersIcons),
        ),
      );
    });
  }

  Future<Uint8List> getImages(String path, int width) async {
    ByteData data = await rootBundle.load(path);
    ui.Codec codec = await ui.instantiateImageCodec(
      data.buffer.asUint8List(),
      targetHeight: width,
    );
    ui.FrameInfo fi = await codec.getNextFrame();
    return (await fi.image.toByteData(format: ui.ImageByteFormat.png))!
        .buffer
        .asUint8List();
  }

  Future<void> _launchGoogleMaps() async {
    final url =
        'https://www.google.com/maps/dir/?api=1&destination=${_currentLocation.latitude},${_currentLocation.longitude}';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch Google Maps';
    }
  }

  @override
  void dispose() {
    // Cancel the timer when the widget is disposed
    _timer.cancel();
    super.dispose();
  }
}
